package org.elastos.dma.base.util.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple5;
import org.web3j.tuples.generated.Tuple6;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.3.1.
 */
public class NFTokenDMA extends Contract {
    private static final String BINARY = "60806040523480156200001157600080fd5b506040516200327838038062003278833981016040908152815160208084015192840151606085015160008084527f67be87c3ff9960ca1e9cfac5cab2ff4747269cf9ed20c9b7306235ac35a491c5805460ff1990811660019081179092557ff7815fccbf112960a73756e185887fedcb9fc64ca0a16cc5923b7960ed78080080548216831790557f77b7bbe0e49b76487c9476b5db3354cf5270619d0037ccb899c2a4c4a75b431880548216831790557f5b5e139f000000000000000000000000000000000000000000000000000000009092527f9562381dfbc2d8b8b66e765249f330164b73e329e5f01670660643571d1974df8054909216179055600d8054600160a060020a0319163317905592850180519095948501949190910192916200014391600a918701906200018b565b5082516200015990600b9060208601906200018b565b5081516200016f90600f9060208501906200018b565b506010805460ff19169115159190911790555062000230915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001ce57805160ff1916838001178555620001fe565b82800160010185558215620001fe579182015b82811115620001fe578251825591602001919060010190620001e1565b506200020c92915062000210565b5090565b6200022d91905b808211156200020c576000815560010162000217565b90565b61303880620002406000396000f3006080604052600436106102035763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166301ffc9a7811461020857806306fdde0314610253578063081812fc146102dd578063095ea7b31461031157806310d6567c1461033757806318160ddd1461038c5780631d230f10146103b357806321112f0b1461045d57806323b872dd1461047a5780632e653324146104a45780632f745c591461050757806341c0e1b51461052b57806342842e0e146105405780634f6ccce71461056a5780635a9b0b89146105825780635c622a0e146106f35780636352211e1461070b5780636f3de7d71461072357806370a082311461073b57806379d395121461075c5780637a5b4f59146107c75780637b167781146107dc57806382e40813146107f45780638c7a63ae1461080f5780638da5cb5b146108f957806394b670b61461090e57806395d89b411461093257806399dd8931146109475780639d47c13c146109825780639dc29fac1461099a5780639fb700fd146109be578063a22cb465146109d9578063a49a1e7d146109ff578063a64c04d814610a1f578063b0467deb14610a94578063b88d4fde14610aac578063bf8712c514610ae5578063c87b56dd14610afd578063d08eb73214610b15578063d0b4232f14610b2d578063e985e9c514610b54578063f2fde38b14610b7b575b600080fd5b34801561021457600080fd5b5061023f7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1960043516610b9c565b604080519115158252519081900360200190f35b34801561025f57600080fd5b50610268610bd4565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102a257818101518382015260200161028a565b50505050905090810190601f1680156102cf5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102e957600080fd5b506102f5600435610c6a565b60408051600160a060020a039092168252519081900360200190f35b34801561031d57600080fd5b50610335600160a060020a0360043516602435610cac565b005b34801561034357600080fd5b506040805160206004803580820135838102808601850190965280855261033595369593946024949385019291829185019084908082843750949750610e769650505050505050565b34801561039857600080fd5b506103a1610eae565b60408051918252519081900360200190f35b3480156103bf57600080fd5b50604080516020600460248035828101358481028087018601909752808652610335968435600160a060020a03169636966044959194909101929182918501908490808284375050604080516020601f89358b018035918201839004830284018301909452808352979a9998810197919650918201945092508291508401838280828437509497505050508235151593505050602001351515610eb5565b34801561046957600080fd5b506103356004356024351515610f55565b34801561048657600080fd5b50610335600160a060020a036004358116906024351660443561108e565b3480156104b057600080fd5b50604080516020600460248035828101358481028087018601909752808652610335968435600160a060020a0316963696604495919490910192918291850190849080828437509497506111e49650505050505050565b34801561051357600080fd5b506103a1600160a060020a036004351660243561121e565b34801561053757600080fd5b50610335611279565b34801561054c57600080fd5b50610335600160a060020a0360043581169060243516604435611323565b34801561057657600080fd5b506103a160043561133f565b34801561058e57600080fd5b506105976113a7565b60408051600160a060020a0384166060820152821515608082015260a080825287519082015286519091829160208084019284019160c08501918b019080838360005b838110156105f25781810151838201526020016105da565b50505050905090810190601f16801561061f5780820380516001836020036101000a031916815260200191505b5084810383528851815288516020918201918a019080838360005b8381101561065257818101518382015260200161063a565b50505050905090810190601f16801561067f5780820380516001836020036101000a031916815260200191505b50848103825287518152875160209182019189019080838360005b838110156106b257818101518382015260200161069a565b50505050905090810190601f1680156106df5780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390f35b3480156106ff57600080fd5b506103a1600435611588565b34801561071757600080fd5b506102f56004356115c4565b34801561072f57600080fd5b5061023f6004356115e8565b34801561074757600080fd5b506103a1600160a060020a0360043516611629565b34801561076857600080fd5b506040805160206004604435818101358381028086018501909652808552610335958335600160a060020a03908116966024803590921696369695606495929493019282918501908490808284375094975061165c9650505050505050565b3480156107d357600080fd5b50610268611698565b3480156107e857600080fd5b506103356004356116f9565b34801561080057600080fd5b5061033560043560243561182d565b34801561081b57600080fd5b50610827600435611985565b6040518087600160a060020a0316600160a060020a0316815260200186151515158152602001851515151581526020018060200184815260200180602001838103835286818151815260200191508051906020019080838360005b8381101561089a578181015183820152602001610882565b50505050905090810190601f1680156108c75780820380516001836020036101000a031916815260200191505b5083810382528451815284516020918201918601908083836000838110156106b257818101518382015260200161069a565b34801561090557600080fd5b506102f5611b29565b34801561091a57600080fd5b50610335600480359060248035908101910135611b38565b34801561093e57600080fd5b50610268611c9d565b34801561095357600080fd5b5061033560048035600160a060020a031690602480359160443591820191013560643515156084351515611cfe565b34801561098e57600080fd5b506103a1600435611d3d565b3480156109a657600080fd5b50610335600160a060020a0360043516602435611d56565b3480156109ca57600080fd5b50610335600435602435611e0e565b3480156109e557600080fd5b50610335600160a060020a03600435166024351515611e83565b348015610a0b57600080fd5b506103356004803560248101910135611f06565b348015610a2b57600080fd5b50604080516020601f60643560048181013592830184900484028501840190955281845261033594600160a060020a0381351694602480359560443595369560849493019181908401838280828437509497505050508235151593505050602001351515611f29565b348015610aa057600080fd5b5061026860043561204c565b348015610ab857600080fd5b50610335600160a060020a0360048035821691602480359091169160443591606435908101910135612118565b348015610af157600080fd5b5061023f60043561215b565b348015610b0957600080fd5b50610268600435612188565b348015610b2157600080fd5b50610268600435612218565b348015610b3957600080fd5b50610335600160a060020a03600435166024356044356122b9565b348015610b6057600080fd5b5061023f600160a060020a0360043581169060243516612366565b348015610b8757600080fd5b50610335600160a060020a03600435166123c1565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19811660009081526020819052604090205460ff165b919050565b600a8054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610c605780601f10610c3557610100808354040283529160200191610c60565b820191906000526020600020905b815481529060010190602001808311610c4357829003601f168201915b5050505050905090565b6000818152600260205260408120548290600160a060020a03161515610c8f57600080fd5b5050600090815260036020526040902054600160a060020a031690565b6000818152600260205260408120548290600160a060020a031633811480610cf75750600160a060020a038116600090815260056020908152604080832033845290915290205460ff165b1515610d0257600080fd5b6000848152600260205260409020548490600160a060020a03161515610d2757600080fd5b600085815260026020526040902054600160a060020a0390811694508616841415610d5157600080fd5b600085815260036020526040902054600160a060020a03161580610d8e5750600085815260036020526040902054600160a060020a038781169116145b1515610e0a576040805160e560020a62461bcd02815260206004820152602560248201527f41737365742068617320617070726f76656420746f20616e6f7468657220616460448201527f6472657373000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600085815260036020526040808220805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a038a811691821790925591518893918816917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050505050565b60005b8151811015610eaa57610ea28282815181101515610e9357fe5b906020019060200201516116f9565b600101610e79565b5050565b6006545b90565b6000805b8551821015610f4c578582815181101515610ed057fe5b60209081029091010151905060008111610f34576040805160e560020a62461bcd02815260206004820152601560248201527f746f6b656e49642073686f756c64206f76657220300000000000000000000000604482015290519081900360640190fd5b610f418782878787612456565b600190910190610eb9565b50505050505050565b6000828152600260205260409020548290600160a060020a03161515610f7a57600080fd5b6000838152600260209081526040808320546003909252909120548491600160a060020a039081169116156110045733610fb383610c6a565b600160a060020a031614610fff576040805160e560020a62461bcd02815260206004820152601a6024820152600080516020612fed833981519152604482015290519081900360640190fd5b611064565b600160a060020a03811633148061102b57503361102083610c6a565b600160a060020a0316145b806110595750600160a060020a038116600090815260056020908152604080832033845290915290205460ff165b151561106457600080fd5b50505060009182526011602052604090912080549115156101000261ff0019909216919091179055565b60008181526002602090815260408083205460039092528220548391600160a060020a0390811691161561111757336110c683610c6a565b600160a060020a031614611112576040805160e560020a62461bcd02815260206004820152601a6024820152600080516020612fed833981519152604482015290519081900360640190fd5b611177565b600160a060020a03811633148061113e57503361113383610c6a565b600160a060020a0316145b8061116c5750600160a060020a038116600090815260056020908152604080832033845290915290205460ff165b151561117757600080fd5b6000848152600260205260409020548490600160a060020a0316151561119c57600080fd5b600085815260026020526040902054600160a060020a039081169450871684146111c557600080fd5b600160a060020a03861615156111da57600080fd5b610f4c86866124ea565b60005b81518110156112195761121183838381518110151561120257fe5b90602001906020020151610cac565b6001016111e7565b505050565b600160a060020a038216600090815260086020526040812054821061124257600080fd5b600160a060020a038316600090815260086020526040902080548390811061126657fe5b9060005260206000200154905092915050565b600d54600160a060020a0316331461129057600080fd5b60105460ff161515600114611315576040805160e560020a62461bcd02815260206004820152602860248201527f436f6e74726163742063616e2774206265206b696c6c2c2069742773206e6f2060448201527f6b696c6c61626c65000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600d54600160a060020a0316ff5b6112198383836020604051908101604052806000815250612565565b600654600090821061135057600080fd5b816007600060068581548110151561136457fe5b906000526020600020015481526020019081526020016000205414151561138757fe5b600680548390811061139557fe5b90600052602060002001549050919050565b600a8054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281526060938493849360009384939092909183018282801561143c5780601f106114115761010080835404028352916020019161143c565b820191906000526020600020905b81548152906001019060200180831161141f57829003601f168201915b5050600b8054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152969b50919450925084019050828280156114cd5780601f106114a2576101008083540402835291602001916114cd565b820191906000526020600020905b8154815290600101906020018083116114b057829003601f168201915b5050600f8054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152969a509194509250840190508282801561155e5780601f106115335761010080835404028352916020019161155e565b820191906000526020600020905b81548152906001019060200180831161154157829003601f168201915b5050600d54601054999a98999498600160a060020a03909116975060ff9094169550929350505050565b6000818152600260205260408120548290600160a060020a031615156115ad57600080fd5b505060009081526011602052604090206001015490565b600081815260026020526040902054600160a060020a0316801515610bcf57600080fd5b6000818152600260205260408120548290600160a060020a0316151561160d57600080fd5b5050600090815260116020526040902054610100900460ff1690565b6000600160a060020a038216151561164057600080fd5b50600160a060020a031660009081526004602052604090205490565b60005b81518110156116925761168a8484848481518110151561167b57fe5b9060200190602002015161108e565b60010161165f565b50505050565b600f8054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610c605780601f10610c3557610100808354040283529160200191610c60565b6000818152600260209081526040808320546003909252909120548291600160a060020a03908116911615611783573361173283610c6a565b600160a060020a03161461177e576040805160e560020a62461bcd02815260206004820152601a6024820152600080516020612fed833981519152604482015290519081900360640190fd5b6117e3565b600160a060020a0381163314806117aa57503361179f83610c6a565b600160a060020a0316145b806117d85750600160a060020a038116600090815260056020908152604080832033845290915290205460ff165b15156117e357600080fd5b600083815260036020526040902054600160a060020a0316156112195750506000908152600360205260409020805473ffffffffffffffffffffffffffffffffffffffff19169055565b6000828152600260209081526040808320546003909252909120548391600160a060020a039081169116156118b7573361186683610c6a565b600160a060020a0316146118b2576040805160e560020a62461bcd02815260206004820152601a6024820152600080516020612fed833981519152604482015290519081900360640190fd5b611917565b600160a060020a0381163314806118de5750336118d383610c6a565b600160a060020a0316145b8061190c5750600160a060020a038116600090815260056020908152604080832033845290915290205460ff165b151561191757600080fd5b83151561196e576040805160e560020a62461bcd02815260206004820152601760248201527f746f6b656e49642073686f756c64206e6f742062652030000000000000000000604482015290519081900360640190fd5b505060009182526011602052604090912060010155565b60008181526002602052604081205481908190606090829082908790600160a060020a031615156119b557600080fd5b6000888152600260208181526040808420546011835281852054600c84529482902080548351610100600183161581026000190190921696909604601f8101869004860287018601909452838652600160a060020a039092169c5090850460ff9081169b50909416985091929190830182828015611a745780601f10611a4957610100808354040283529160200191611a74565b820191906000526020600020905b815481529060010190602001808311611a5757829003601f168201915b50505060008b8152601160209081526040918290206001808201546002928301805486519381161561010002600019011693909304601f8101859004850283018501909552848252969a509598509350909150830182828015611b185780601f10611aed57610100808354040283529160200191611b18565b820191906000526020600020905b815481529060010190602001808311611afb57829003601f168201915b505050505091505091939550919395565b600d54600160a060020a031681565b6000838152600260209081526040808320546003909252909120548491600160a060020a03908116911615611bc25733611b7183610c6a565b600160a060020a031614611bbd576040805160e560020a62461bcd02815260206004820152601a6024820152600080516020612fed833981519152604482015290519081900360640190fd5b611c22565b600160a060020a038116331480611be9575033611bde83610c6a565b600160a060020a0316145b80611c175750600160a060020a038116600090815260056020908152604080832033845290915290205460ff165b1515611c2257600080fd5b841515611c79576040805160e560020a62461bcd02815260206004820152601760248201527f746f6b656e49642073686f756c64206e6f742062652030000000000000000000604482015290519081900360640190fd5b6000858152601160205260409020611c95906002018585612e82565b505050505050565b600b8054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610c605780601f10610c3557610100808354040283529160200191610c60565b611c95868686868080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050508585612456565b6000611d50600e8363ffffffff61283a16565b92915050565b600d54600160a060020a03163314611d6d57600080fd5b60008181526011602052604090205460ff161515600114611dd8576040805160e560020a62461bcd02815260206004820152601d60248201527f54686520617373657420636f756c64206e6f74206265206275726e6564000000604482015290519081900360640190fd5b611de2828261284d565b6000818152601160205260408120805461ffff1916815560018101829055906116926002830182612f00565b606060008211611e68576040805160e560020a62461bcd02815260206004820152601760248201527f636f756e742073686f7564206d6f7265207468616e2030000000000000000000604482015290519081900360640190fd5b611e78838363ffffffff61289516565b905061121981610e76565b600160a060020a0382161515611e9857600080fd5b336000818152600560209081526040808320600160a060020a03871680855290835292819020805460ff1916861515908117909155815190815290519293927f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31929181900390910190a35050565b600d54600160a060020a03163314611f1d57600080fd5b611219600f8383612e82565b600080808711611f83576040805160e560020a62461bcd02815260206004820152601560248201527f746f6b656e49642073686f756c64206f76657220300000000000000000000000604482015290519081900360640190fd5b60008611611fdb576040805160e560020a62461bcd02815260206004820152601a60248201527f436f756e74206e756d6265722073686f756c64206f7665722030000000000000604482015290519081900360640190fd5b611fec600e8863ffffffff61290a16565b9150600090505b8581101561201f576120178861200f848463ffffffff61292f16565b878787612456565b600101611ff3565b61204287612033848963ffffffff61292f16565b600e919063ffffffff61294516565b5050505050505050565b6000818152600260205260409020546060908290600160a060020a0316151561207457600080fd5b6000838152601160209081526040918290206002908101805484516001821615610100026000190190911692909204601f81018490048402830184019094528382529092909183018282801561210b5780601f106120e05761010080835404028352916020019161210b565b820191906000526020600020905b8154815290600101906020018083116120ee57829003601f168201915b5050505050915050919050565b61215485858585858080601f01602080910402602001604051908101604052809392919081815260200183838082843750612565945050505050565b5050505050565b600081815260026020526040812054600160a060020a03161561218057506001610bcf565b506000919050565b6000818152600260205260409020546060908290600160a060020a031615156121b057600080fd5b6000838152600c602090815260409182902080548351601f60026000196101006001861615020190931692909204918201849004840281018401909452808452909183018282801561210b5780601f106120e05761010080835404028352916020019161210b565b6000818152600c602090815260409182902080548351601f60026000196101006001861615020190931692909204918201849004840281018401909452808452606093928301828280156122ad5780601f10612282576101008083540402835291602001916122ad565b820191906000526020600020905b81548152906001019060200180831161229057829003601f168201915b50505050509050919050565b60006060818311612314576040805160e560020a62461bcd02815260206004820152601860248201527f636f756e742073686f756c64206d6f7265207468616e20300000000000000000604482015290519081900360640190fd5b61232560018563ffffffff61290a16565b9150612337828463ffffffff61289516565b905061234385826111e4565b61215484612357848663ffffffff61292f16565b6001919063ffffffff61294516565b6000600160a060020a038316151561237d57600080fd5b600160a060020a038216151561239257600080fd5b50600160a060020a03918216600090815260056020908152604080832093909416825291909152205460ff1690565b600d54600160a060020a031633146123d857600080fd5b600160a060020a03811615156123ed57600080fd5b600d54604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600d805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6124608585612973565b61246a84846129c4565b6040805160808101825282151581528315156020808301918252600083850181815285518084018752828152606086019081528a8352601184529590912084518154945115156101000261ff001991151560ff19909616959095171693909317835551600183015592518051929391926120429260028501920190612f44565b600081815260026020526040902054600160a060020a031661250b82612a08565b6125158183612a52565b61251f8383612b53565b8183600160a060020a031682600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b600082815260026020908152604080832054600390925282205482918591600160a060020a039182169116156125f0573361259f83610c6a565b600160a060020a0316146125eb576040805160e560020a62461bcd02815260206004820152601a6024820152600080516020612fed833981519152604482015290519081900360640190fd5b612650565b600160a060020a03811633148061261757503361260c83610c6a565b600160a060020a0316145b806126455750600160a060020a038116600090815260056020908152604080832033845290915290205460ff165b151561265057600080fd5b6000868152600260205260409020548690600160a060020a0316151561267557600080fd5b600087815260026020526040902054600160a060020a0390811695508916851461269e57600080fd5b600160a060020a03881615156126b357600080fd5b6126bd88886124ea565b6126cf88600160a060020a0316612b9c565b1561282f576040517f150b7a020000000000000000000000000000000000000000000000000000000081523360048201818152600160a060020a038c81166024850152604484018b90526080606485019081528a5160848601528a51918d169463150b7a0294938f938e938e93909160a490910190602085019080838360005b8381101561276757818101518382015260200161274f565b50505050905090810190601f1680156127945780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b1580156127b657600080fd5b505af11580156127ca573d6000803e3d6000fd5b505050506040513d60208110156127e057600080fd5b505193507bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1984167f150b7a02000000000000000000000000000000000000000000000000000000001461282f57600080fd5b505050505050505050565b6000908152602091909152604090205490565b6128578282612ba4565b6000818152600c60205260409020546002600019610100600184161502019091160415610eaa576000818152600c60205260408120610eaa91612f00565b60606000826040519080825280602002602001820160405280156128c3578160200160208202803883390190505b509150600090505b82811015612903576128e3848263ffffffff61292f16565b82828151811015156128f157fe5b602090810290910101526001016128cb565b5092915050565b600081815260208390526040812054801561292757809150612903565b509092915050565b60008282018381101561293e57fe5b9392505050565b8082141561296157600082815260208490526040812055611219565b60009182526020929092526040902055565b600061297f8383612c64565b5060068054600181019091557ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f81018290556000918252600760205260409091205550565b6000828152600260205260409020548290600160a060020a031615156129e957600080fd5b6000838152600c60209081526040909120835161169292850190612f44565b600081815260036020526040902054600160a060020a031615612a4f576000818152600360205260409020805473ffffffffffffffffffffffffffffffffffffffff191690555b50565b6000806000612a618585612ced565b600160a060020a03851660009081526008602052604081205411612a8157fe5b600084815260096020908152604080832054600160a060020a038916845260089092529091208054919450600019820193509083908110612abe57fe5b90600052602060002001549050806008600087600160a060020a0316600160a060020a0316815260200190815260200160002084815481101515612afe57fe5b6000918252602080832090910192909255600160a060020a0387168152600890915260409020805490612b35906000198301612fb2565b50600090815260096020526040808220939093559283525081205550565b6000612b5f8383612d7c565b50600160a060020a039091166000908152600860209081526040808320805460018101825590845282842081018590559383526009909152902055565b6000903b1190565b6000806000612bb38585612e0d565b600654600010612bbf57fe5b60008481526007602052604090205460068054919450859185908110612be157fe5b9060005260206000200154141515612bf557fe5b600680546000198101935083908110612c0a57fe5b9060005260206000200154905080600684815481101515612c2757fe5b6000918252602090912001556006805490612c46906000198301612fb2565b50600090815260076020526040808220939093559283525081205550565b600160a060020a0382161515612c7957600080fd5b801515612c8557600080fd5b600081815260026020526040902054600160a060020a031615612ca757600080fd5b612cb18282612b53565b6040518190600160a060020a038416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b600081815260026020526040902054600160a060020a03838116911614612d1357600080fd5b600160a060020a03821660009081526004602052604081205411612d3357fe5b600160a060020a03909116600090815260046020908152604080832080546000190190559282526002905220805473ffffffffffffffffffffffffffffffffffffffff19169055565b600081815260026020526040902054600160a060020a031615612d9e57600080fd5b6000818152600260209081526040808320805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03871690811790915583526004909152902054612ded90600161292f565b600160a060020a0390921660009081526004602052604090209190915550565b6000818152600260205260409020548190600160a060020a03161515612e3257600080fd5b612e3b82612a08565b612e458383612a52565b6040518290600090600160a060020a038616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a4505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612ec35782800160ff19823516178555612ef0565b82800160010185558215612ef0579182015b82811115612ef0578235825591602001919060010190612ed5565b50612efc929150612fd2565b5090565b50805460018160011615610100020316600290046000825580601f10612f265750612a4f565b601f016020900490600052602060002090810190612a4f9190612fd2565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612f8557805160ff1916838001178555612ef0565b82800160010185558215612ef0579182015b82811115612ef0578251825591602001919060010190612f97565b815481835581811115611219576000838152602090206112199181019083015b610eb291905b80821115612efc5760008155600101612fd856004f6e6c7920617070726f7665642063616e207472616e73666572000000000000a165627a7a72305820c0a00e443c06bcb013f4ab19eaec8d19d1be201849af0e05343d60ba212a26780029";

    protected NFTokenDMA(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected NFTokenDMA(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("OwnershipTransferred", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<OwnershipTransferredEventResponse> ownershipTransferredEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("OwnershipTransferred", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<TransferEventResponse> getTransferEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("Transfer", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}),
                Arrays.<TypeReference<?>>asList());
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse._tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<TransferEventResponse> transferEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("Transfer", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}),
                Arrays.<TypeReference<?>>asList());
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, TransferEventResponse>() {
            @Override
            public TransferEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                TransferEventResponse typedResponse = new TransferEventResponse();
                typedResponse.log = log;
                typedResponse._from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._to = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse._tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public List<ApprovalEventResponse> getApprovalEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("Approval", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}),
                Arrays.<TypeReference<?>>asList());
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._approved = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse._tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ApprovalEventResponse> approvalEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("Approval", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}),
                Arrays.<TypeReference<?>>asList());
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, ApprovalEventResponse>() {
            @Override
            public ApprovalEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                ApprovalEventResponse typedResponse = new ApprovalEventResponse();
                typedResponse.log = log;
                typedResponse._owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._approved = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse._tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public List<ApprovalForAllEventResponse> getApprovalForAllEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("ApprovalForAll", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<ApprovalForAllEventResponse> responses = new ArrayList<ApprovalForAllEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._operator = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse._approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ApprovalForAllEventResponse> approvalForAllEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("ApprovalForAll", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, ApprovalForAllEventResponse>() {
            @Override
            public ApprovalForAllEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
                typedResponse.log = log;
                typedResponse._owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._operator = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse._approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public RemoteCall<Boolean> supportsInterface(byte[] _interfaceID) {
        final Function function = new Function("supportsInterface", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes4(_interfaceID)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<String> name() {
        final Function function = new Function("name", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> getApproved(BigInteger _tokenId) {
        final Function function = new Function("getApproved", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> approve(String _approved, BigInteger _tokenId) {
        final Function function = new Function(
                "approve", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_approved), 
                new org.web3j.abi.datatypes.generated.Uint256(_tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> removeApproveWithArray(List<BigInteger> _array) {
        final Function function = new Function(
                "removeApproveWithArray", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(_array, org.web3j.abi.datatypes.generated.Uint256.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> totalSupply() {
        final Function function = new Function("totalSupply", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> mintWithArray(String _to, List<BigInteger> _array, String _uri, Boolean _isTransfer, Boolean _isBurn) {
        final Function function = new Function(
                "mintWithArray", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_to), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(_array, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.Utf8String(_uri), 
                new org.web3j.abi.datatypes.Bool(_isTransfer), 
                new org.web3j.abi.datatypes.Bool(_isBurn)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setIsTransfer(BigInteger _tokenId, Boolean _istransfer) {
        final Function function = new Function(
                "setIsTransfer", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_tokenId), 
                new org.web3j.abi.datatypes.Bool(_istransfer)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> transferFrom(String _from, String _to, BigInteger _tokenId) {
        final Function function = new Function(
                "transferFrom", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_from), 
                new org.web3j.abi.datatypes.Address(_to), 
                new org.web3j.abi.datatypes.generated.Uint256(_tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> approveWithAarry(String _approved, List<BigInteger> _tokenArr) {
        final Function function = new Function(
                "approveWithArray",
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_approved), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(_tokenArr, org.web3j.abi.datatypes.generated.Uint256.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> tokenOfOwnerByIndex(String _owner, BigInteger _index) {
        final Function function = new Function("tokenOfOwnerByIndex", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_owner), 
                new org.web3j.abi.datatypes.generated.Uint256(_index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> kill() {
        final Function function = new Function(
                "kill", 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> safeTransferFrom(String _from, String _to, BigInteger _tokenId) {
        final Function function = new Function(
                "safeTransferFrom", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_from), 
                new org.web3j.abi.datatypes.Address(_to), 
                new org.web3j.abi.datatypes.generated.Uint256(_tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> tokenByIndex(BigInteger _index) {
        final Function function = new Function("tokenByIndex", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Tuple5<String, String, String, String, Boolean>> getInfo() {
        final Function function = new Function("getInfo", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Bool>() {}));
        return new RemoteCall<Tuple5<String, String, String, String, Boolean>>(
                new Callable<Tuple5<String, String, String, String, Boolean>>() {
                    @Override
                    public Tuple5<String, String, String, String, Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<String, String, String, String, Boolean>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (Boolean) results.get(4).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> getStatus(BigInteger _tokenId) {
        final Function function = new Function("getStatus", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> ownerOf(BigInteger _tokenId) {
        final Function function = new Function("ownerOf", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<Boolean> getIsTransfer(BigInteger _tokenId) {
        final Function function = new Function("getIsTransfer", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<BigInteger> balanceOf(String _owner) {
        final Function function = new Function("balanceOf", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_owner)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> transferFromWithAarry(String _from, String _to, List<BigInteger> _tokenIds) {
        final Function function = new Function(
                "transferFromWithAarry", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_from), 
                new org.web3j.abi.datatypes.Address(_to), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(_tokenIds, org.web3j.abi.datatypes.generated.Uint256.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> getMetadata() {
        final Function function = new Function("getMetadata", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> revokeApprove(BigInteger _tokenId) {
        final Function function = new Function(
                "revokeApprove", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setStatus(BigInteger _tokenId, BigInteger _status) {
        final Function function = new Function(
                "setStatus", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_tokenId), 
                new org.web3j.abi.datatypes.generated.Uint256(_status)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple6<String, Boolean, Boolean, String, BigInteger, String>> getTokenInfo(BigInteger _tokenId) {
        final Function function = new Function("getTokenInfo", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Bool>() {}, new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteCall<Tuple6<String, Boolean, Boolean, String, BigInteger, String>>(
                new Callable<Tuple6<String, Boolean, Boolean, String, BigInteger, String>>() {
                    @Override
                    public Tuple6<String, Boolean, Boolean, String, BigInteger, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<String, Boolean, Boolean, String, BigInteger, String>(
                                (String) results.get(0).getValue(), 
                                (Boolean) results.get(1).getValue(), 
                                (Boolean) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (String) results.get(5).getValue());
                    }
                });
    }

    public RemoteCall<String> owner() {
        final Function function = new Function("owner", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> setUser(BigInteger _tokenId, String _user) {
        final Function function = new Function(
                "setUser", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_tokenId), 
                new org.web3j.abi.datatypes.Utf8String(_user)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> symbol() {
        final Function function = new Function("symbol", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> mint(String _to, BigInteger _tokenId, String _uri, Boolean _isTransfer, Boolean _isBurn) {
        final Function function = new Function(
                "mintAsync",
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_to), 
                new org.web3j.abi.datatypes.generated.Uint256(_tokenId), 
                new org.web3j.abi.datatypes.Utf8String(_uri), 
                new org.web3j.abi.datatypes.Bool(_isTransfer), 
                new org.web3j.abi.datatypes.Bool(_isBurn)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> getLatestTokenId(BigInteger _tokenId) {
        final Function function = new Function("getLatestTokenId", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> burn(String _owner, BigInteger _tokenId) {
        final Function function = new Function(
                "burn", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_owner), 
                new org.web3j.abi.datatypes.generated.Uint256(_tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> removeMultiApprove(BigInteger _tokenId, BigInteger _count) {
        final Function function = new Function(
                "removeMultiApprove", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_tokenId), 
                new org.web3j.abi.datatypes.generated.Uint256(_count)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setApprovalForAll(String _operator, Boolean _approved) {
        final Function function = new Function(
                "setApprovalForAll", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_operator), 
                new org.web3j.abi.datatypes.Bool(_approved)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setMetadata(String _metadata) {
        final Function function = new Function(
                "setMetadata", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_metadata)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> mintMulti(String _to, BigInteger _tokenId, BigInteger _count, String _uri, Boolean _isTransfer, Boolean _isBurn) {
        final Function function = new Function(
                "mintMulti", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_to), 
                new org.web3j.abi.datatypes.generated.Uint256(_tokenId), 
                new org.web3j.abi.datatypes.generated.Uint256(_count), 
                new org.web3j.abi.datatypes.Utf8String(_uri), 
                new org.web3j.abi.datatypes.Bool(_isTransfer), 
                new org.web3j.abi.datatypes.Bool(_isBurn)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> getUser(BigInteger _tokenId) {
        final Function function = new Function("getUser", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> safeTransferFrom(String _from, String _to, BigInteger _tokenId, byte[] _data) {
        final Function function = new Function(
                "safeTransferFrom", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_from), 
                new org.web3j.abi.datatypes.Address(_to), 
                new org.web3j.abi.datatypes.generated.Uint256(_tokenId), 
                new org.web3j.abi.datatypes.DynamicBytes(_data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Boolean> valid(BigInteger _tokenId) {
        final Function function = new Function("valid", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<String> tokenURI(BigInteger _tokenId) {
        final Function function = new Function("tokenURI", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> checkUri(BigInteger _tokenId) {
        final Function function = new Function("checkUri", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> approveMulti(String _approved, BigInteger _tokenId, BigInteger _count) {
        final Function function = new Function(
                "approveMulti", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_approved), 
                new org.web3j.abi.datatypes.generated.Uint256(_tokenId), 
                new org.web3j.abi.datatypes.generated.Uint256(_count)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Boolean> isApprovedForAll(String _owner, String _operator) {
        final Function function = new Function("isApprovedForAll", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_owner), 
                new org.web3j.abi.datatypes.Address(_operator)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> transferOwnership(String _newOwner) {
        final Function function = new Function(
                "transferOwnership", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public static RemoteCall<NFTokenDMA> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String _name, String _symbol, String _metadata, Boolean _isBurn) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_name), 
                new org.web3j.abi.datatypes.Utf8String(_symbol), 
                new org.web3j.abi.datatypes.Utf8String(_metadata), 
                new org.web3j.abi.datatypes.Bool(_isBurn)));
        return deployRemoteCall(NFTokenDMA.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static RemoteCall<NFTokenDMA> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String _name, String _symbol, String _metadata, Boolean _isBurn) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_name), 
                new org.web3j.abi.datatypes.Utf8String(_symbol), 
                new org.web3j.abi.datatypes.Utf8String(_metadata), 
                new org.web3j.abi.datatypes.Bool(_isBurn)));
        return deployRemoteCall(NFTokenDMA.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static NFTokenDMA load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new NFTokenDMA(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static NFTokenDMA load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new NFTokenDMA(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static class OwnershipTransferredEventResponse {
        public Log log;

        public String previousOwner;

        public String newOwner;
    }

    public static class TransferEventResponse {
        public Log log;

        public String _from;

        public String _to;

        public BigInteger _tokenId;
    }

    public static class ApprovalEventResponse {
        public Log log;

        public String _owner;

        public String _approved;

        public BigInteger _tokenId;
    }

    public static class ApprovalForAllEventResponse {
        public Log log;

        public String _owner;

        public String _operator;

        public Boolean _approved;
    }
}
